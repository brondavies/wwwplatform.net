@using wwwplatform.Models;
@using wwwplatform.Models.ViewModels;
@using wwwplatform.Extensions.Helpers;
@using wwwplatform.Shared.Extensions;

@model wwwplatform.Models.SharedFolder

@{
    ViewBag.Title = Model.Name;
    var isAdmin = User.IsInRole(wwwplatform.Models.Roles.Administrators);
    var isFolderOwner = isAdmin || Model.UpdatedBy == User.Identity.Name;
    var canUpload = isFolderOwner || UserInAnyRole(Settings.RolesWithUploadPermission.Split(','));
    var hasParent = Model.ParentFolderId.HasValue;
    var parentlink = hasParent ? "/Shared/" + Model.ParentFolder.Slug : "/SharedFolders";
    var parentName = hasParent ? Model.ParentFolder.Name : "";
}
@helper SubFolderDisplay(wwwplatform.Models.SharedFolder folder)
{
    <div class="col-lg-1 col-md-2 col-sm-2">
        <i class="fa fa-folder-o fa-3x"></i>
        @Html.ActionLink(Model.Name, Model.Slug, "Shared", new { @class = "center-block" })
    </div>
}
@helper BytesToString(long? size)
{
string display = "";
if (size.HasValue)
{
    display = FileStorage.FormatBytes(Convert.ToDouble(size));
}
WriteLiteral(display);
}
@helper ViewerUrl(WebFile file)
{
switch (file.GetFileType())
{
    //Files that can be handled in a viewer
    //WriteLiteral(string.Format("/ViewerJS/#/Downloads/{0}/{1}", file.Id, file.GetFileName()));
    //break;
    //Files that can be handled by the browser
    case FileType.Audio:
    case FileType.Image:
    case FileType.PDF:
    case FileType.Text:
    case FileType.Video:
        WriteLiteral(string.Format("/Downloads/{0}/{1}", file.Id, file.GetFileName()));
        break;
    case FileType.Document:
    case FileType.Presentation:
    case FileType.Spreadsheet:
        if (Settings.CreatePDFVersionsOfDocuments)
        {
            WriteLiteral(string.Format("/Downloads/{0}/{1}", file.Id, Path.ChangeExtension(file.GetFileName(), "pdf")));
        }
        else
        {
            WriteLiteral(string.Format("/WebFiles/Details/{0}?v=1", file.Id));
        }
        break;
    default:
        WriteLiteral(string.Format("/WebFiles/Details/{0}?v=1", file.Id));
        break;
}
}
@helper ViewerTarget(WebFile file)
{
switch (file.GetFileType())
{
    //Files that can be handled in the viewer or by the browser
    case FileType.Audio:
    case FileType.Image:
    case FileType.PDF:
    case FileType.Text:
    case FileType.Video:
        WriteLiteral("_blank");
        break;
    //Files that have to be downloaded
    default:
        WriteLiteral("_top");
        break;
}
}
<h2>
    <a href="@parentlink" class="btn btn-link" title="@parentName">
        <i class="fa fa-level-up fa-2x"></i>
    </a>
    @ViewBag.Title
    <span class="h3 text-muted">
        @Model.Description
    </span>
</h2>
<section class="h3 text-right">
    <div class="btn-group">
    @if (canUpload)
    {
        @Html.ActionLink("New Folder", "Create", "SharedFolders", new { ParentFolderId = Model.Id }, new { @class = "btn btn-default" })
        @UploadDialogButton(new SelectFileOptions { name = "Folder_" + Model.Slug, text = "Upload" })
        if (isFolderOwner)
        {
            @Html.ActionLink("Edit", "Edit", new { id = Model.Id }, new { @class = "btn btn-default" })
        }
    }
    @if (Model.Podcast)
    {
        @Html.ActionLink("Podcast", "Podcast", null, new { @class = "btn btn-default" })
    }
    </div>
</section>
@if (Model.Files.Count() == 0 && Model.SubFolders.Count() == 0)
{
    <section class="jumbotron text-center"><h3 class="text-muted">No files or folders here</h3></section>
}
else
{
    <table class="table table-striped auto-datatable clickable">
        <thead>
            <tr>
                <th data-orderable="false" data-width="4px"></th>
                <th data-order="asc">
                    Name
                </th>
                <th class="hidden-xs hidden-sm">
                    Description
                </th>
                <th class="hidden-xs">
                    Date
                </th>
                <th class="visible-xs">
                    Date
                </th>
                <th class="hidden-xs hidden-sm">
                    Uploaded By
                </th>
                <th>
                    Size
                </th>
                <th class="disable-sorting"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var folder in Model.SubFolders)
            {
                <tr data-href="/Shared/@(folder.Slug)">
                    <td>
                        <i class="fa fa-folder-o fa-lg"></i>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => folder.Name)
                    </td>
                    <td class="hidden-xs hidden-sm">
                        @Html.DisplayFor(modelItem => folder.Description)
                    </td>
                    <td class="hidden-xs">
                        @folder.UpdatedAt.ToTimezone(UserTimeZoneOffset).ToString("G")
                    </td>
                    <td class="visible-xs">
                        @folder.UpdatedAt.ToTimezone(UserTimeZoneOffset).ToString("d")
                    </td>
                    <td class="hidden-xs hidden-sm">
                        @Html.DisplayFor(modelItem => folder.UpdatedBy)
                    </td>
                    <td data-sort="0" data-order="0"></td>
                    <td>
                        @Html.Partial("_TableActionButtons", folder, new TableActionOptions { showDelete = isFolderOwner || folder.IsOwner(User), showEdit = folder.IsOwner(User), showDetails = false, Controller = "SharedFolders" })
                    </td>
                </tr>
            }
            @foreach (var item in Model.Files)
            {
                <tr data-href="@ViewerUrl(item)" data-target="@ViewerTarget(item)">
                    <td>
                        <i class="fa @(item.Icon) fa-lg"></i>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td class="hidden-xs hidden-sm">
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td class="hidden-xs">
                        @((item.DisplayDate ?? item.UpdatedAt).ToTimezone(UserTimeZoneOffset).ToString("G"))
                    </td>
                    <td class="visible-xs">
                        @((item.DisplayDate ?? item.UpdatedAt).ToTimezone(UserTimeZoneOffset).ToString("d"))
                    </td>
                    <td class="hidden-xs hidden-sm">
                        @Html.DisplayFor(modelItem => item.UpdatedBy)
                    </td>
                    <td data-sort="@(item.Size)" data-order="@(item.Size)">
                        @BytesToString(item.Size)
                    </td>
                    <td>
                        @Html.Partial("_TableActionButtons", item, new TableActionOptions { showDelete = isFolderOwner || item.IsOwner(User), showEdit = item.IsOwner(User), detailLabel = "Download", Controller = "WebFiles" })
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@using (Html.BeginScriptContext())
{
    if (User.Identity.IsAuthenticated)
    {
        Html.AddScriptBlock(
            @<script type="text/javascript">
                $(function () {
                    $(window).bind('Folder_@(Model.Slug).selected', function (event, data) {
                        var id = data.id;
                        var csrf = $('input[name="__RequestVerificationToken"]').val();
                        $.post('/SharedFolders/AddFiles/@Model.Id', {
                            files: eval(id),
                            '__RequestVerificationToken': csrf
                        })
                        .success(function () {
                            window.location.reload(true);
                        })
                        .fail(function (result) {
                            bootbox.alert('The file could not be uploaded to this shared folder.');
                        });
                    });
                });
            </script>
        );
    }
}